OpenShift Origin 101
29 May 2017
OpenStack Barcelona
Tags: openshift, origin, redhat

Sergio Jimenez
Cloud TAM, Red Hat
sjr@redhat.com
@tripledes


* About me

Recovering sysadmin:

.image images/me_even_smaller.jpg 180 140

- Worked in traditional sysadmin envs. since 2002 to 2012
- Done some 4 years of "DevOps" time in Germany
- Platform Consultant @ Red Hat 2016
- Cloud TAM - OpenShift @ Red Hat 2017


* Agenda

- How to deploy a basic OpenShift Origin
- Deploy our first application


* What's OpenShift Origin?

- OpenShift Origin is the open source upstream project that powers OpenShift Container Platform
- (opinionated) Kubernetes for the Enterprise

: Currently containers a run on docker
: Kubernetes used for scheduling and management

* History

- OpenShift v1/v2, own implementation, some weird stuff with gears, cartdriges...
- OpenShift (aka Origin) v3, rewritten and based on Kubernetes

: OpenShift v1/v2 heavily used kernel features (cgroups, SELinux, ...) for running containerized apps

* Why OpenShift Origin?

- Container Hype?
- Agile Hype?
- DevOps Hype?
- Real need?
- Take your pick...

.image images/Philosoraptor.jpg 170 170
.caption Hmmmm why do I need all this again 

: This is about the idea of writing Origin
: Kubernetes does a wonderful job, avoid reinventing the wheel
: Truth is there is certain need to have a fully integrated solution.
: But integration brings opinions.

* What's on OpenShift Origin

Kubernetes + some extras:
 - Automation (builds and deployments)
 - Self service (templates and web console)
 - Authentication (different backends)
 - Projects (namespaces)
 - Routing functionality
 - Metrics
 - Logging
 - Language support
 - Jenkins integration
 ...

: Provide a fully functional platform for Developers
: Does that help Ops?

* Project Namespaces

- Sandboxed environments
- Network VXLan (openshift-sdn)
- Auth policies
- Resource quotas
- Apps

: Using namespaces => isolation/multitenancy
: openshift-sdn based in OpenVSwitch provides network overlay
: auth policies inside the project
: resource quotas per project

* Applications

- Images run in containers
- Can be group as a Service
- Defined as templates

* Templates

- Describes a set of objects that can be parameterized and processed
- Produces a list of objects for ready creation
- Anything you have permission to create within a project
- From CLI
- From project uploaded templates
- From global template library

: From web console, a form is presented when template is selected, params
: Those must be specified when using CLI

* Simple template example #1

Template metadata:

.code -numbers examples/simple-template.yaml /^apiVersion: v1/,/nosql"/

* Simple template example #2

Objects list:

.code -numbers examples/simple-template.yaml /^objects:/,/protocol: TCP$/

* Simple template example #3

.code -numbers examples/simple-template.yaml /^parameters:/,/master$/
